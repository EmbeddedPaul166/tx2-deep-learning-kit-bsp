/*
 * Copyright (c) 2015-2017, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#define CAMERA_I2C_MUX_BUS(x) (0x1E + x)
/ {
	host1x {
		vi@15700000 {
			num-channels = <6>;
			ports {
				#address-cells = <1>;
				#size-cells = <0>;
				port@0 {
					reg = <0>;
					ov5640_vi_in0: endpoint {
						csi-port = <0>;
						bus-width = <2>;
						remote-endpoint = <&ov5640_csi_out0>;
					};
				};
				port@1 {
					reg = <1>;
					ov5640_vi_in1: endpoint {
						csi-port = <1>;
						bus-width = <2>;
						remote-endpoint = <&ov5640_csi_out1>;
					};
				};
				port@2 {
					reg = <2>;
					ov5640_vi_in2: endpoint {
						csi-port = <2>;
						bus-width = <2>;
						remote-endpoint = <&ov5640_csi_out2>;
					};
				};
				port@3 {
					reg = <3>;
					ov5640_vi_in3: endpoint {
						csi-port = <3>;
						bus-width = <2>;
						remote-endpoint = <&ov5640_csi_out3>;
					};
				};
				port@4 {
					reg = <4>;
					ov5640_vi_in4: endpoint {
						csi-port = <4>;
						bus-width = <2>;
						remote-endpoint = <&ov5640_csi_out4>;
					};
				};
				port@5 {
					reg = <5>;
					ov5640_vi_in5: endpoint {
						csi-port = <5>;
						bus-width = <2>;
						remote-endpoint = <&ov5640_csi_out5>;
					};
				};
			};
		};

		nvcsi@150c0000 {
			num-channels = <6>;
			#address-cells = <1>;
			#size-cells = <0>;
			channel@0 {
				reg = <0>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						ov5640_csi_in0: endpoint@0 {
							csi-port = <0>;
							bus-width = <2>;
							remote-endpoint = <&ov5640_out0>;
						};
					};
					port@1 {
						reg = <1>;
						ov5640_csi_out0: endpoint@1 {
							remote-endpoint = <&ov5640_vi_in0>;
						};
					};
				};
			};
			channel@1 {
				reg = <1>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						ov5640_csi_in1: endpoint@0 {
							csi-port = <1>;
							bus-width = <2>;
							remote-endpoint = <&ov5640_out1>;
						};
					};
					port@1 {
						reg = <1>;
						ov5640_csi_out1: endpoint@1 {
							remote-endpoint = <&ov5640_vi_in1>;
						};
					};
				};
			};
			channel@2 {
				reg = <2>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						ov5640_csi_in2: endpoint@0 {
							csi-port = <2>;
							bus-width = <2>;
							remote-endpoint = <&ov5640_out2>;
						};
					};
					port@1 {
						reg = <1>;
						ov5640_csi_out2: endpoint@1 {
							remote-endpoint = <&ov5640_vi_in2>;
						};
					};
				};
			};
			channel@3 {
				reg = <3>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						ov5640_csi_in3: endpoint@0 {
							csi-port = <3>;
							bus-width = <2>;
							remote-endpoint = <&ov5640_out3>;
						};
					};
					port@1 {
						reg = <1>;
						ov5640_csi_out3: endpoint@1 {
							remote-endpoint = <&ov5640_vi_in3>;
						};
					};
				};
			};
			channel@4 {
				reg = <4>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						ov5640_csi_in4: endpoint@0 {
							csi-port = <4>;
							bus-width = <2>;
							remote-endpoint = <&ov5640_out4>;
						};
					};
					port@1 {
						reg = <1>;
						ov5640_csi_out4: endpoint@1 {
							remote-endpoint = <&ov5640_vi_in4>;
						};
					};
				};
			};
			channel@5 {
				reg = <5>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						ov5640_csi_in5: endpoint@0 {
							csi-port = <5>;
							bus-width = <2>;
							remote-endpoint = <&ov5640_out5>;
						};
					};
					port@1 {
						reg = <1>;
						ov5640_csi_out5: endpoint@1 {
							remote-endpoint = <&ov5640_vi_in5>;
						};
					};
				};
			};	
		};
	};

	i2c@c240000 {

		tca9548_70: tca9548@70 {

			compatible = "nxp,pca9548";

			reg = <0x70>;

			#address-cells = <1>;

			#size-cells = <0>;

			force_bus_start = <CAMERA_I2C_MUX_BUS(0)>;

			i2c@0 {
				reg = <0>;
				i2c-mux,deselect-on-exit;
				#address-cells = <1>;
				#size-cells = <0>;

				ov5640_c@3c {
					devnode = "video0";
					compatible = "nvidia,ov5640";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */

					/* Physical dimensions of sensor */
					physical_w = "3.674";
					physical_h = "2.738";

					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					avdd-reg = "vana";
					iovdd-reg = "vif";

					/* Sensor output flip settings */
					vertical-flip = "true";

					/**
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* mclk_khz = "";
					* Standard MIPI driving clock, typically 24MHz
					*
					* num_lanes = "";
					* Number of lane channels sensor is programmed to output
					*
					* tegra_sinterface = "";
					* The base tegra serial interface lanes are connected to
					*
					* discontinuous_clk = "";
					* The sensor is programmed to use a discontinuous clock on MIPI lanes
					*
					* dpcm_enable = "true";
					* The sensor is programmed to use a DPCM modes
					*
					* cil_settletime = "";
					* MIPI lane settle time value.
					* A "0" value attempts to autocalibrate based on mclk_multiplier
					*
					*
					*
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					* This is used to calibrate features in our camera stack.
					*
					* mclk_multiplier = "";
					* Multiplier to MCLK to help time hardware capture sequence
					* TODO: Assign to PLL_Multiplier as well until fixed in core
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					*
					*
					*
					* inherent_gain = "";
					* Gain obtained inherently from mode (ie. pixel binning)
					*
					* min_gain_val = ""; (floor to 6 decimal places)
					* max_gain_val = ""; (floor to 6 decimal places)
					* Gain limits for mode
					*
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (us)
					*
					*
					* min_hdr_ratio = "";
					* max_hdr_ratio = "";
					* HDR Ratio limits for mode
					*
					* min_framerate = "";
					* max_framerate = "";
					* Framerate limits for mode (fps)
					*/
					mode1 { //OV5693_MODE_1920x1080
						mclk_khz = "24000";
						num_lanes = "2";
						tegra_sinterface = "serial_c";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						active_w = "1920";
						active_h = "1080";
						pixel_t = "uyvy";
						readout_orientation = "90";
						line_length = "2500";
						inherent_gain = "1";
						mclk_multiplier = "5.25";
						pix_clk_hz = "160000000";

						min_gain_val = "0";
						max_gain_val = "48";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						min_framerate = "1.816577";
						max_framerate = "30";
						min_exp_time = "34";
						max_exp_time = "660000";
						embedded_metadata_height = "0";
					};

					

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							ov5640_out2: endpoint {
								csi-port = <2>;
								bus-width = <2>;
								remote-endpoint = <&ov5640_csi_in2>;
							};
						};
					};
		
				};	
	
			};


			

			i2c@1 {

				reg = <1>;

				i2c-mux,deselect-on-exit;

				#address-cells = <1>;

				#size-cells = <0>;

				ov5640_d@3c {
					devnode = "video1";
					compatible = "nvidia,ov5640";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */

					/* Physical dimensions of sensor */
					physical_w = "3.674";
					physical_h = "2.738";

					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					avdd-reg = "vana";
					iovdd-reg = "vif";

					/* Sensor output flip settings */
					vertical-flip = "true";	

					mode1 { //OV5693_MODE_1920x1080
						mclk_khz = "24000";
						num_lanes = "2";
						tegra_sinterface = "serial_d";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						active_w = "1920";
						active_h = "1080";
						pixel_t = "uyvy";
						readout_orientation = "90";
						line_length = "2500";
						inherent_gain = "1";
						mclk_multiplier = "5.25";
						pix_clk_hz = "160000000";

						min_gain_val = "0";
						max_gain_val = "48";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						min_framerate = "1.816577";
						max_framerate = "30";
						min_exp_time = "34";
						max_exp_time = "660000";
						embedded_metadata_height = "0";
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							ov5640_out3: endpoint {
								csi-port = <3>;
								bus-width = <2>;
								remote-endpoint = <&ov5640_csi_in3>;
							};
						};
					};
		
				};		

			};

			i2c@2 {

				reg = <2>;

				i2c-mux,deselect-on-exit;

				#address-cells = <1>;

				#size-cells = <0>;
				ov5640_a@3c {
					devnode = "video2";
					compatible = "nvidia,ov5640";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */

					/* Physical dimensions of sensor */
					physical_w = "3.674";
					physical_h = "2.738";

					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					avdd-reg = "vana";
					iovdd-reg = "vif";

					/* Sensor output flip settings */
					vertical-flip = "true";

					mode1 { //OV5693_MODE_1920x1080
						mclk_khz = "24000";
						num_lanes = "2";
						tegra_sinterface = "serial_a";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						active_w = "1920";
						active_h = "1080";
						pixel_t = "uyvy";
						readout_orientation = "90";
						line_length = "2500";
						inherent_gain = "1";
						mclk_multiplier = "5.25";
						pix_clk_hz = "160000000";

						min_gain_val = "0";
						max_gain_val = "48";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						min_framerate = "1.816577";
						max_framerate = "30";
						min_exp_time = "34";
						max_exp_time = "660000";
						embedded_metadata_height = "0";
					};
				
					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							ov5640_out0: endpoint {
								csi-port = <0>;
								bus-width = <2>;
								remote-endpoint = <&ov5640_csi_in0>;
							};
						};
					};
		
				};	
			

			};

			i2c@3 {

				reg = <3>;

				i2c-mux,deselect-on-exit;

				#address-cells = <1>;

				#size-cells = <0>;

				ov5640_b@3c {
					devnode = "video3";
					compatible = "nvidia,ov5640";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */

					/* Physical dimensions of sensor */
					physical_w = "3.674";
					physical_h = "2.738";

					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					avdd-reg = "vana";
					iovdd-reg = "vif";

					/* Sensor output flip settings */
					vertical-flip = "true";
		
					mode1 { //OV5693_MODE_1920x1080
						mclk_khz = "24000";
						num_lanes = "2";
						tegra_sinterface = "serial_b";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						active_w = "1920";
						active_h = "1080";
						pixel_t = "uyvy";
						readout_orientation = "90";
						line_length = "2500";
						inherent_gain = "1";
						mclk_multiplier = "5.25";
						pix_clk_hz = "160000000";

						min_gain_val = "0";
						max_gain_val = "48";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						min_framerate = "1.816577";
						max_framerate = "30";
						min_exp_time = "34";
						max_exp_time = "660000";
						embedded_metadata_height = "0";
					};
					
					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							ov5640_out1: endpoint {
								csi-port = <1>;
								bus-width = <2>;
								remote-endpoint = <&ov5640_csi_in1>;
							};
						};
					};
		
				};

			};

			i2c@4 {

				reg = <4>;

				i2c-mux,deselect-on-exit;

				#address-cells = <1>;

				#size-cells = <0>;

				ov5640_f@3c {
					devnode = "video4";
					compatible = "nvidia,ov5640";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */

					/* Physical dimensions of sensor */
					physical_w = "3.674";
					physical_h = "2.738";

					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					avdd-reg = "vana";
					iovdd-reg = "vif";

					/* Sensor output flip settings */
					vertical-flip = "true";
				
					mode1 { //OV5693_MODE_1920x1080
						mclk_khz = "24000";
						num_lanes = "2";
						tegra_sinterface = "serial_f";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						active_w = "1920";
						active_h = "1080";
						pixel_t = "uyvy";
						readout_orientation = "90";
						line_length = "2500";
						inherent_gain = "1";
						mclk_multiplier = "5.25";
						pix_clk_hz = "160000000";

						min_gain_val = "0";
						max_gain_val = "48";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						min_framerate = "1.816577";
						max_framerate = "30";
						min_exp_time = "34";
						max_exp_time = "660000";
						embedded_metadata_height = "0";
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							ov5640_out5: endpoint {
								csi-port = <5>;
								bus-width = <2>;
								remote-endpoint = <&ov5640_csi_in5>;
							};
						};
					};
		
				};

			};

			i2c@5 {

				reg = <5>;

				i2c-mux,deselect-on-exit;

				#address-cells = <1>;

				#size-cells = <0>;

				ov5640_e@3c {
					devnode = "video5";
					compatible = "nvidia,ov5640";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */

					/* Physical dimensions of sensor */
					physical_w = "3.674";
					physical_h = "2.738";

					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					avdd-reg = "vana";
					iovdd-reg = "vif";

					/* Sensor output flip settings */
					vertical-flip = "true";
	

					mode1 { //OV5693_MODE_1920x1080
						mclk_khz = "24000";
						num_lanes = "2";
						tegra_sinterface = "serial_e";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						active_w = "1920";
						active_h = "1080";
						pixel_t = "uyvy";
						readout_orientation = "90";
						line_length = "2500";
						inherent_gain = "1";
						mclk_multiplier = "5.25";
						pix_clk_hz = "160000000";

						min_gain_val = "0";
						max_gain_val = "48";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						min_framerate = "1.816577";
						max_framerate = "30";
						min_exp_time = "34";
						max_exp_time = "660000";
						embedded_metadata_height = "0";
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							ov5640_out4: endpoint {
								csi-port = <4>;
								bus-width = <2>;
								remote-endpoint = <&ov5640_csi_in4>;
							};
						};
					};
		
				};

			};

			i2c@6 {

				reg = <6>;

				i2c-mux,deselect-on-exit;

				#address-cells = <1>;

				#size-cells = <0>;

			};

			i2c@7 {

				reg = <7>;

				i2c-mux,deselect-on-exit;

				#address-cells = <1>;

				#size-cells = <0>;

			};
	


	 	};
	
	 };
	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";
		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <12>;
		max_lane_speed = <1500000>;
		min_bits_per_pixel = <10>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		max_pixel_rate = <160000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		* The general guideline for naming badge_info contains 3 parts, and is as follows,
		* The first part is the camera_board_id for the module; if the module is in a FFD
		* platform, then use the platform name for this part.
		* The second part contains the position of the module, ex. “rear” or “front”.
		* The third part contains the last 6 characters of a part number which is found
		* in the module's specsheet from the vender.
		*/
		modules {
			module0 {
				badge = "ov5640_0";
				position = "topleft";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "ov5640 30-003c";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@c240000/tca9548@70/i2c@0/ov5640_c@3c";
				};
				
			};
			module1 {
				badge = "ov5640_1";
				position = "topright";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "ov5640 31-003c";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@c240000/tca9548@70/i2c@1/ov5640_d@3c";
				};
				
			};
			module2 {
				badge = "ov5640_2";
				position = "bottomleft";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "ov5640 32-003c";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@c240000/tca9548@70/i2c@2/ov5640_a@3c";
				};
				
			};
			module3 {
				badge = "ov5640_3";
				position = "bottomright";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "ov5640 33-003c";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@c240000/tca9548@70/i2c@3/ov5640_b@3c";
				};
				
			};

			module4 {
				badge = "ov5640_4";
				position = "centerleft";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "ov5640 34-003c";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@c240000/tca9548@70/i2c@4/ov5640_f@3c";
				};
				
			};
			module5 {
				badge = "ov5640_5";
				position = "centerright";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver v4l2 device name */
					devname = "ov5640 35-003c";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@c240000/tca9548@70/i2c@5/ov5640_e@3c";
				};
				
			};
		};
	};
};
